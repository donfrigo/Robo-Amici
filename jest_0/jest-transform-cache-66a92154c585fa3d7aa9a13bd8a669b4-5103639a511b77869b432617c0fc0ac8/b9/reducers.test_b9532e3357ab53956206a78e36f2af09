'use strict';var _constants = require('./constants');






var _reducers = require('./reducers');var reducers = _interopRequireWildcard(_reducers);function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}

describe('searchRobots', () => {
    const initialStateSearch = {
        searchField: '' };


    it('should return the initial state', () => {
        expect(reducers.searchRobots(undefined, {})).toEqual({ searchField: '' });
    });

    it('should handle CHANGE_SEARCHFIELD', () => {
        expect(reducers.searchRobots(initialStateSearch, {
            type: _constants.CHANGE_SEARCHFIELD,
            payload: 'abc' })).
        toEqual({
            searchField: 'abc' });

    });

});

describe('requestRobots', () => {
    const initialStateRobots = {
        robots: [],
        isPending: false,
        error: '' };


    it('should return the initial state', () => {
        expect(reducers.requestRobots(undefined, {})).toEqual(initialStateRobots);
    });

    it('should handle REQUEST_ROBOTS_PENDING action', () => {
        expect(reducers.requestRobots(initialStateRobots, {
            type: _constants.REQUEST_ROBOTS_PENDING })).
        toEqual({
            robots: [],
            isPending: true,
            error: '' });

    });

    it('should handle REQUEST_ROBOTS_SUCCESS action', () => {
        expect(reducers.requestRobots(initialStateRobots, {
            type: _constants.REQUEST_ROBOTS_SUCCESS,
            payload: [{
                id: '123',
                name: 'test',
                email: 'test@gmail.com' }] })).

        toEqual({
            robots: [
            {
                id: '123',
                name: 'test',
                email: 'test@gmail.com' }],


            isPending: false,
            error: '' });

    });

    it('should handle REQUEST_ROBOTS_FAIL action', () => {
        expect(reducers.requestRobots(initialStateRobots, {
            type: _constants.REQUEST_ROBOTS_FAILED,
            payload: 'NOOOOO!!' })).
        toEqual({
            robots: [],
            isPending: false,
            error: 'NOOOOO!!' });

    });
});